package ru.academits.shapes;

public class Shapes {

}

//Задача 1. Фигуры
//        Часть 1.Создать иерархию классов для геометрических фигур.
//        Лекции, нужные для решения задачи:1-5.
//        Для них нужно создать интерфейс Shape (IShapeв C#), в котором определены методы:
//        doublegetWidth()
//        doublegetHeight()
//        doublegetArea()
//        double getPerimeter()
//        В C# имена методов с заглавной буквы.
//        Все фигуры должны реализовывать этот интерфейс и правильным образом определять данные методы
//        1.	Square – квадрат
//        Должен иметь конструктор, принимающий длину стороны
//        2.	Triangle–треугольник
//        Должен иметь конструктор, принимающий x1, y1, x2, y2, x3, y3 – шесть координат.
//        В качестве ширины возвращать max(x1, x2, x3) – min(x1, x2, x3)
//        В качестве высоты возвращать max(y1, y2, y3) – min(y1, y2, y3)
//        3.	Rectangle – прямоугольник
//        Должен иметь конструктор, принимающий длины двух сторон
//        4.	Circle – окружность
//        Должна иметь конструктор, принимающий радиус. В качестве ширины и высоты должен выдаваться диаметр
//        Часть 2.В main в кодеобъявить массив фигур, чтобы в нём было около 5-10 разных фигур. Задача – написать функцию, которая находит фигуру с максимальной площадью. Вызвать её для этогомассива и распечатать информацию о фигуре в консоль.
//        Аналогично найдите фигуру со вторым по величине периметром.
//        Поиск фигур реализовать через стандартный метод Arrays.sort (в C# Array.Sort)с компаратором. Что такое компаратор почитайте сами, но если будут вопросы, задавайте.
//        Часть 3.ПереопределитевфигурахметодыtoString, hashCode, equals (вC# - ToString, GetHashCode, Equals)
//
//        Чему научитесь:
//        •	Интерфейсы, реализация интерфейса
//        •	Виртуальные функции  – как они работают и применяются
//        •	Реализация toString, hashCode, equals
//        •	Применение стандартной сортировки, компараторы, реализация интерфейсов
